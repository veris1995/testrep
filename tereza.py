import ccxt
import pandas as pd
import asyncio
import threading
import time
import logging
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor
import json

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CallbackQueryHandler, ContextTypes

# ---------------- CONFIG ----------------
TELEGRAM_TOKEN = '1532666897:AAFtl_PbxoxI9V1v7Jjr_DYMqPUhCujDx5M'
TELEGRAM_CHAT_ID = '1305348616'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID –∏–ª–∏ –∫–∞–Ω–∞–ª

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–º–ø-–¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
PCT_1M_THRESHOLD = 1.5      # % —Ä–æ—Å—Ç –∑–∞ 1 –º–∏–Ω—É—Ç—É
PCT_5M_THRESHOLD = 3.0      # % —Ä–æ—Å—Ç –∑–∞ 5 –º–∏–Ω—É—Ç
PCT_1M_DOWN_THRESHOLD = -1.5 # % –ø–∞–¥–µ–Ω–∏–µ –∑–∞ 1 –º–∏–Ω—É—Ç—É
PCT_5M_DOWN_THRESHOLD = -3.0 # % –ø–∞–¥–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç
VOLUME_MULTIPLIER = 2.5     # —Ä–æ—Å—Ç –æ–±—ä–µ–º–∞ –∫ —Å—Ä–µ–¥–Ω–µ–º—É
MIN_24H_VOLUME_USD = 500_000

BLACKLIST = ["SCAM", "FAKE", "TEST", "DOGE", "SHIT"]
MAX_WORKERS = 8             # –£–º–µ–Ω—å—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
LOOP_SLEEP_SECONDS = 5      # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
ALERT_COOLDOWN_MINUTES = 3
CACHE_REFRESH_MINUTES = 30  # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
# ----------------------------------------

logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(message)s",
    level=logging.INFO
)

# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
bot_app = None
bot_loop = None
cached_futures_symbols = []  # –ö—ç—à —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
last_cache_update = None
cached_ohlcv = {}            # –ö—ç—à OHLCV –¥–∞–Ω–Ω—ã—Ö

class FuturesScreener:
    def __init__(self):
        self.exchange = ccxt.mexc({
            'options': {
                'defaultType': 'swap',
                'adjustForTimeDifference': True
            },
            'timeout': 15000,
            'enableRateLimit': True,
            'rateLimit': 500  # –ë—ã—Å—Ç—Ä–µ–µ –∑–∞–ø—Ä–æ—Å—ã
        })
        self.spot_exchange = ccxt.mexc({
            'timeout': 15000,
            'enableRateLimit': True,
            'rateLimit': 500
        })
        self.executor = ThreadPoolExecutor(max_workers=MAX_WORKERS)
        self.last_alerts = {}
        self.last_pullback_alerts = {}
        self.scan_counter = 0

    async def send_message_safe(self, text, reply_markup=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            await bot_app.bot.send_message(
                chat_id=TELEGRAM_CHAT_ID,
                text=text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            return True
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False

    async def send_startup_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ"""
        text = (
            "üöÄ <b>–§–¨–Æ–ß–ï–†–°–ù–´–ô –°–ö–ê–ù–ï–† MEXC –ó–ê–ü–£–©–ï–ù!</b>\n"
            "üìà –°–∫–∞–Ω–∏—Ä—É—é —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ –ø–∞–º–ø—ã –∏ –æ—Ç–∫–∞—Ç—ã...\n"
            "‚ö° –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = –≤—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å!\n"
            "üì≤ –°–∏–≥–Ω–∞–ª—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞!"
        )
        await self.send_message_safe(text)

    async def send_scan_report(self, total_symbols, scanned_count, duration, signals_found):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        try:
            text = (
                f"üìä <b>–û–¢–ß–ï–¢ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø –§–¨–Æ–ß–ï–†–°–û–í #{self.scan_counter}</b>\n\n"
                f"üìà –í—Å–µ–≥–æ —Ñ—å—é—á–µ—Ä—Å–æ–≤: <b>{total_symbols}</b>\n"
                f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: <b>{scanned_count}</b>\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è: <b>{duration:.1f}</b> —Å–µ–∫\n"
                f"üéØ –°–∏–≥–Ω–∞–ª–æ–≤: <b>{signals_found}</b>\n"
                f"üïí –í—Ä–µ–º—è: <b>{datetime.now().strftime('%H:%M:%S')}</b>"
            )
            await self.send_message_safe(text)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")

    async def send_signal(self, symbol, signal_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ—â–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram"""
        try:
            signal_type = signal_data['type']
            
            leverage_info = f"üî¢ –ü–ª–µ—á–æ: <b>x{signal_data.get('leverage', 20)}</b>\n"
            
            if signal_type == 'PUMP_LONG':
                text = (
                    f"üöÄ <b>–§–¨–Æ–ß–ï–†–°–ù–´–ô –ü–ê–ú–ü –í–í–ï–†–•</b> üöÄ\n"
                    f"<code>{symbol}</code>\n\n"
                    f"CALLTYPE: <b>üî• LONG –§–¨–Æ–ß–ï–†–°</b>\n"
                    f"üìà 1m: <b>{signal_data['pct_1m']:.2f}%</b>\n"
                    f"üìà 5m: <b>{signal_data['pct_5m']:.2f}%</b>\n"
                    f"üìä Volume x{signal_data['volume_mult']:.1f}\n"
                    f"üî¢ RSI: <b>{signal_data['rsi']:.2f}</b>\n"
                    f"{leverage_info}\n"
                    f"üí∞ –í—Ö–æ–¥: <b>{signal_data['price']:.6f}</b>\n"
                    f"üõë –°—Ç–æ–ø: <b>{signal_data['stop']:.6f}</b>\n"
                    f"üéØ TP1: <b>{signal_data['tp1']:.6f}</b>\n"
                    f"üéØ TP2: <b>{signal_data['tp2']:.6f}</b>\n"
                    f"üéØ TP3: <b>{signal_data['tp3']:.6f}</b>\n\n"
                    f"‚ö†Ô∏è <i>–í—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö!</i>"
                )
            elif signal_type == 'DUMP_SHORT':
                text = (
                    f"üí£ <b>–§–¨–Æ–ß–ï–†–°–ù–´–ô –î–ê–ú–ü –í–ù–ò–ó</b> üí£\n"
                    f"<code>{symbol}</code>\n\n"
                    f"CALLTYPE: <b>üîª SHORT –§–¨–Æ–ß–ï–†–°</b>\n"
                    f"üìâ 1m: <b>{signal_data['pct_1m']:.2f}%</b>\n"
                    f"üìâ 5m: <b>{signal_data['pct_5m']:.2f}%</b>\n"
                    f"üìä Volume x{signal_data['volume_mult']:.1f}\n"
                    f"üî¢ RSI: <b>{signal_data['rsi']:.2f}</b>\n"
                    f"{leverage_info}\n"
                    f"üí∞ –í—Ö–æ–¥: <b>{signal_data['price']:.6f}</b>\n"
                    f"üõë –°—Ç–æ–ø: <b>{signal_data['stop']:.6f}</b>\n"
                    f"üéØ TP1: <b>{signal_data['tp1']:.6f}</b>\n"
                    f"üéØ TP2: <b>{signal_data['tp2']:.6f}</b>\n"
                    f"üéØ TP3: <b>{signal_data['tp3']:.6f}</b>\n\n"
                    f"‚ö†Ô∏è <i>–í—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–æ–±–æ–π –≤–Ω–∏–∑!</i>"
                )
            elif signal_type == 'PULLBACK_LONG':
                text = (
                    f"üéØ <b>–§–¨–Æ–ß–ï–†–° –õ–û–ù–ì –ù–ê –û–¢–ö–ê–¢–ï</b> üìà\n"
                    f"<code>{symbol}</code>\n\n"
                    f"CALLTYPE: <b>üîÅ LONG –Ω–∞ –æ—Ç–∫–∞—Ç–µ</b>\n"
                    f"üìä RSI: <b>{signal_data['rsi']:.2f}</b>\n"
                    f"üìä Volume x{signal_data['volume_mult']:.1f}\n"
                    f"{leverage_info}\n"
                    f"üí∞ –í—Ö–æ–¥: <b>{signal_data['entry']:.6f}</b>\n"
                    f"üõë –°—Ç–æ–ø: <b>{signal_data['stop']:.6f}</b>\n"
                    f"üéØ TP1: <b>{signal_data['tp1']:.6f}</b>\n"
                    f"üéØ TP2: <b>{signal_data['tp2']:.6f}</b>\n"
                    f"üéØ TP3: <b>{signal_data['tp3']:.6f}</b>\n\n"
                    f"üìâ –£—Ä–æ–≤–µ–Ω—å –æ—Ç–∫–∞—Ç–∞: <b>{signal_data['pullback_level']:.6f}</b>\n"
                    f"üìà EMA20: <b>{signal_data['ema20']:.6f}</b>"
                )
            elif signal_type == 'PULLBACK_SHORT':
                text = (
                    f"üéØ <b>–§–¨–Æ–ß–ï–†–° –®–û–†–¢ –ù–ê –û–¢–ö–ê–¢–ï</b> üìâ\n"
                    f"<code>{symbol}</code>\n\n"
                    f"CALLTYPE: <b>üîª SHORT –Ω–∞ –æ—Ç–∫–∞—Ç–µ</b>\n"
                    f"üìä RSI: <b>{signal_data['rsi']:.2f}</b>\n"
                    f"üìä Volume x{signal_data['volume_mult']:.1f}\n"
                    f"{leverage_info}\n"
                    f"üí∞ –í—Ö–æ–¥: <b>{signal_data['entry']:.6f}</b>\n"
                    f"üõë –°—Ç–æ–ø: <b>{signal_data['stop']:.6f}</b>\n"
                    f"üéØ TP1: <b>{signal_data['tp1']:.6f}</b>\n"
                    f"üéØ TP2: <b>{signal_data['tp2']:.6f}</b>\n"
                    f"üéØ TP3: <b>{signal_data['tp3']:.6f}</b>\n\n"
                    f"üìà –£—Ä–æ–≤–µ–Ω—å –æ—Ç–∫–∞—Ç–∞: <b>{signal_data['pullback_level']:.6f}</b>\n"
                    f"üìâ EMA20: <b>{signal_data['ema20']:.6f}</b>"
                )

            keyboard = [
                [
                    InlineKeyboardButton("üîç –°—Ç–∞–∫–∞–Ω", callback_data=f"orderbook|{symbol}"),
                    InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details|{symbol}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await self.send_message_safe(text, reply_markup)
            logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_data['type']} –¥–ª—è {symbol}")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")

    def send_from_thread(self, coro):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ—Ä—É—Ç–∏–Ω—ã –∏–∑ –ø–æ—Ç–æ–∫–∞"""
        try:
            if bot_loop and bot_app:
                asyncio.run_coroutine_threadsafe(coro, bot_loop)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –ø–æ—Ç–æ–∫–∞: {e}")

    def fetch_ohlcv_with_retry(self, symbol, timeframe="1m", limit=10, retries=3):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(retries):
            try:
                return self.exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
            except ccxt.RateLimitExceeded:
                logging.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è {symbol}. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retries}")
                time.sleep(5 * (attempt + 1))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏
        raise Exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫")

    def get_cached_ohlcv(self, symbol, timeframe="1m", limit=10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö OHLCV –¥–∞–Ω–Ω—ã—Ö"""
        key = f"{symbol}_{timeframe}_{limit}"
        if key in cached_ohlcv:
            data, timestamp = cached_ohlcv[key]
            if (datetime.now() - timestamp).total_seconds() < 60:  # –ö—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω 1 –º–∏–Ω—É—Ç—É
                return data
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∞ –∏–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = self.fetch_ohlcv_with_retry(symbol, timeframe=timeframe, limit=limit)
        cached_ohlcv[key] = (data, datetime.now())
        return data

    def check_symbol(self, symbol):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∞"""
        try:
            logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ñ—å—é—á–µ—Ä—Å {symbol}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ OHLCV
            ohlcv_1m = self.get_cached_ohlcv(symbol, timeframe="1m", limit=10)
            ohlcv_5m = self.get_cached_ohlcv(symbol, timeframe="5m", limit=50)

            if ohlcv_1m and len(ohlcv_1m) >= 2:
                df_1m = pd.DataFrame(ohlcv_1m, columns=["ts", "o", "h", "l", "c", "v"])
                df_1m = technical_indicators(df_1m)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º–ø–∞ (–ª–æ–Ω–≥)
                pump_signal = detect_pump_signal(df_1m)
                if pump_signal:
                    pump_signal['leverage'] = 10
                    now = datetime.now()
                    alert_key = f"{symbol}_pump"
                    if alert_key not in self.last_alerts or (now - self.last_alerts[alert_key]) > timedelta(minutes=ALERT_COOLDOWN_MINUTES):
                        self.last_alerts[alert_key] = now
                        self.send_from_thread(self.send_signal(symbol, pump_signal))

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–º–ø–∞ (—à–æ—Ä—Ç)
                dump_signal = detect_dump_signal(df_1m)
                if dump_signal:
                    dump_signal['leverage'] = 10
                    now = datetime.now()
                    alert_key = f"{symbol}_dump"
                    if alert_key not in self.last_alerts or (now - self.last_alerts[alert_key]) > timedelta(minutes=ALERT_COOLDOWN_MINUTES):
                        self.last_alerts[alert_key] = now
                        self.send_from_thread(self.send_signal(symbol, dump_signal))

            if ohlcv_5m and len(ohlcv_5m) >= 50:
                df_5m = pd.DataFrame(ohlcv_5m, columns=["ts", "o", "h", "l", "c", "v"])
                
                # –õ–æ–Ω–≥ –æ—Ç–∫–∞—Ç
                pullback_long_signal = detect_pullback_long_signal(df_5m, symbol)
                if pullback_long_signal:
                    pullback_long_signal['leverage'] = 20
                    now = datetime.now()
                    alert_key = f"{symbol}_pullback_long"
                    if alert_key not in self.last_pullback_alerts or (now - self.last_pullback_alerts[alert_key]) > timedelta(minutes=ALERT_COOLDOWN_MINUTES):
                        self.last_pullback_alerts[alert_key] = now
                        self.send_from_thread(self.send_signal(symbol, pullback_long_signal))

                # –®–æ—Ä—Ç –æ—Ç–∫–∞—Ç
                pullback_short_signal = detect_pullback_short_signal(df_5m, symbol)
                if pullback_short_signal:
                    pullback_short_signal['leverage'] = 20
                    now = datetime.now()
                    alert_key = f"{symbol}_pullback_short"
                    if alert_key not in self.last_pullback_alerts or (now - self.last_pullback_alerts[alert_key]) > timedelta(minutes=ALERT_COOLDOWN_MINUTES):
                        self.last_pullback_alerts[alert_key] = now
                        self.send_from_thread(self.send_signal(symbol, pullback_short_signal))

        except ccxt.BadSymbol:
            logging.warning(f"‚ö†Ô∏è –§—å—é—á–µ—Ä—Å {symbol} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ccxt.RateLimitExceeded:
            logging.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è {symbol}")
            time.sleep(5)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {symbol}: {e}")

    def get_cached_futures_symbols(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        global cached_futures_symbols, last_cache_update
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
        if (last_cache_update is None or 
            (datetime.now() - last_cache_update).total_seconds() > CACHE_REFRESH_MINUTES * 60):
            
            logging.info("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—ç—à —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤...")
            cached_futures_symbols = self._load_futures_symbols()
            last_cache_update = datetime.now()
            logging.info(f"‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω: {len(cached_futures_symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return cached_futures_symbols

    def _load_futures_symbols(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ —Ä—ã–Ω–∫–∏
            self.exchange.load_markets()
            futures_markets = self.exchange.markets
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Ç–æ–≤—ã–µ —Ä—ã–Ω–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –æ–±—ä–µ–º—É
            spot_markets = self.spot_exchange.load_markets()
            
            futures_symbols = []
            
            # –ò—â–µ–º —Ñ—å—é—á–µ—Ä—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXX/USDT:USDT
            for symbol in futures_markets:
                if (symbol.endswith('/USDT:USDT') and 
                    futures_markets[symbol].get("active", True) and
                    not any(b.upper() in symbol.upper() for b in BLACKLIST)):
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –º–æ–Ω–µ—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—ä–µ–º–∞
                        base_coin = symbol.split('/')[0]
                        spot_symbol = f"{base_coin}/USDT"
                        
                        if spot_symbol in spot_markets:
                            ticker = self.spot_exchange.fetch_ticker(spot_symbol)
                            if ticker.get('quoteVolume', 0) > MIN_24H_VOLUME_USD:
                                futures_symbols.append(symbol)
                                
                    except Exception as e:
                        continue
                        
            logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(futures_symbols)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä")
            return futures_symbols
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤: {e}")
            return []

    def start_screener(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–∞–Ω–µ—Ä"""
        while True:
            try:
                self.scan_counter += 1
                start_time = time.time()
                
                logging.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—å—é—á–µ—Ä—Å–æ–≤ #{self.scan_counter}...")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                symbols = self.get_cached_futures_symbols()
                logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ—å—é—á–µ—Ä—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(symbols)}")
                if symbols:
                    logging.info(f"üìã –ü–µ—Ä–≤—ã–µ 10: {symbols[:10]}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞–∂–¥—ã–π 3-–π —Ü–∏–∫–ª)
                if self.scan_counter % 3 == 1:
                    self.send_from_thread(
                        self.send_scan_report(len(symbols), 0, 0, 0)
                    )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—å—é—á–µ—Ä—Å—ã
                futures = [self.executor.submit(self.check_symbol, symbol) for symbol in symbols]
                for future in futures:
                    future.result()  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
                    time.sleep(0.1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

                end_time = time.time()
                scan_duration = end_time - start_time
                
                logging.info(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{self.scan_counter} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                logging.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(symbols)} —Ñ—å—é—á–µ—Ä—Å–æ–≤, "
                           f"{scan_duration:.1f} —Å–µ–∫")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç (–∫–∞–∂–¥—ã–π 5-–π —Ü–∏–∫–ª)
                if self.scan_counter % 5 == 1:
                    self.send_from_thread(
                        self.send_scan_report(
                            len(symbols),
                            len(symbols),
                            scan_duration,
                            len(self.last_alerts) + len(self.last_pullback_alerts)
                        )
                    )

                logging.info(f"‚è≥ –ñ–¥—É {LOOP_SLEEP_SECONDS} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
                
            except Exception as e:
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∫–∞–Ω–µ—Ä–µ: {e}")
                time.sleep(30)

            time.sleep(LOOP_SLEEP_SECONDS)

# ==================== –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–ó–ê ====================

def technical_indicators(df):
    """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    try:
        if len(df) < 20:
            return df
            
        df['ema12'] = df['c'].ewm(span=12).mean()
        df['ema20'] = df['c'].ewm(span=20).mean()
        df['ema26'] = df['c'].ewm(span=26).mean()
        df['ema50'] = df['c'].ewm(span=50).mean()
        df['macd'] = df['ema12'] - df['ema26']
        df['signal'] = df['macd'].ewm(span=9).mean()
        delta = df['c'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        df['rsi'] = 100 - (100 / (1 + rs))
        df['avg_volume'] = df['v'].rolling(window=20).mean()
        return df
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ technical_indicators: {e}")
        return df

def detect_pump_signal(df):
    """–î–µ—Ç–µ–∫—Ü–∏—è –ø–∞–º–ø–∞"""
    try:
        if len(df) < 10:
            return None
        
        last = df.iloc[-1]
        prev1 = df.iloc[-2]
        prev5 = df.iloc[-6]
        
        pct_1m = (last["c"] - prev1["c"]) / prev1["c"] * 100
        pct_5m = (last["c"] - prev5["c"]) / prev5["c"] * 100
        avg_vol = df["v"].iloc[:-1].mean()
        volume_mult = last["v"] / avg_vol if avg_vol > 0 else 0
        
        if ((abs(pct_1m) > PCT_1M_THRESHOLD or abs(pct_5m) > PCT_5M_THRESHOLD) and 
            volume_mult > VOLUME_MULTIPLIER):
            
            price = last["c"]
            if pct_1m > 0 or pct_5m > 0:  # LONG
                stop = price * 0.97
                tp1 = price * 1.03
                tp2 = price * 1.06
                tp3 = price * 1.09
                signal_type = 'PUMP_LONG'
            else:  # SHORT
                stop = price * 1.03
                tp1 = price * 0.97
                tp2 = price * 0.94
                tp3 = price * 0.91
                signal_type = 'DUMP_SHORT'
            
            return {
                'type': signal_type,
                'pct_1m': pct_1m,
                'pct_5m': pct_5m,
                'volume_mult': volume_mult,
                'price': price,
                'stop': stop,
                'tp1': tp1,
                'tp2': tp2,
                'tp3': tp3,
                'rsi': last.get('rsi', 50),
                'volume': last['v']
            }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ detect_pump_signal: {e}")
    return None

def detect_dump_signal(df):
    """–î–µ—Ç–µ–∫—Ü–∏—è –¥–∞–º–ø–∞"""
    try:
        if len(df) < 10:
            return None
        
        last = df.iloc[-1]
        prev1 = df.iloc[-2]
        prev5 = df.iloc[-6]
        
        pct_1m = (last["c"] - prev1["c"]) / prev1["c"] * 100
        pct_5m = (last["c"] - prev5["c"]) / prev5["c"] * 100
        avg_vol = df["v"].iloc[:-1].mean()
        volume_mult = last["v"] / avg_vol if avg_vol > 0 else 0
        
        if ((pct_1m < PCT_1M_DOWN_THRESHOLD or pct_5m < PCT_5M_DOWN_THRESHOLD) and 
            volume_mult > VOLUME_MULTIPLIER and 
            last.get('rsi', 50) > 20):
            
            price = last["c"]
            stop = price * 1.03
            tp1 = price * 0.97
            tp2 = price * 0.94
            tp3 = price * 0.91
            
            return {
                'type': 'DUMP_SHORT',
                'pct_1m': pct_1m,
                'pct_5m': pct_5m,
                'volume_mult': volume_mult,
                'price': price,
                'stop': stop,
                'tp1': tp1,
                'tp2': tp2,
                'tp3': tp3,
                'rsi': last.get('rsi', 50),
                'volume': last['v']
            }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ detect_dump_signal: {e}")
    return None

def detect_pullback_long_signal(df, symbol):
    """–î–µ—Ç–µ–∫—Ü–∏—è –ª–æ–Ω–≥ –æ—Ç–∫–∞—Ç–∞"""
    try:
        if len(df) < 50:
            return None

        df = technical_indicators(df)
        
        last = df.iloc[-1]
        if not (last['ema12'] > last['ema26'] > last['ema50']):
            return None

        recent = df.tail(5)
        if len(recent) < 5:
            return None

        second_last = recent.iloc[-2]
        last_candle = recent.iloc[-1]
        
        if (second_last['c'] < second_last['ema20'] and 
            last_candle['c'] > last_candle['ema20'] and 
            last_candle['v'] > last_candle['avg_volume'] * 1.2):
            
            pullback_level = second_last['ema20']
            entry_price = last_candle['c']
            pullback_percent = abs(entry_price - pullback_level) / pullback_level * 100
            
            if pullback_percent <= 5.0:
                stop_loss = pullback_level * 0.98
                risk = entry_price - stop_loss
                take_profit_1 = entry_price + risk * 1
                take_profit_2 = entry_price + risk * 2
                take_profit_3 = entry_price + risk * 3

                return {
                    'type': 'PULLBACK_LONG',
                    'entry': entry_price,
                    'stop': stop_loss,
                    'tp1': take_profit_1,
                    'tp2': take_profit_2,
                    'tp3': take_profit_3,
                    'pullback_level': pullback_level,
                    'ema20': last_candle['ema20'],
                    'rsi': last_candle.get('rsi', 50),
                    'volume': last_candle['v'],
                    'volume_mult': last_candle['v'] / last_candle['avg_volume']
                }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ detect_pullback_long_signal: {e}")
    return None

def detect_pullback_short_signal(df, symbol):
    """–î–µ—Ç–µ–∫—Ü–∏—è —à–æ—Ä—Ç –æ—Ç–∫–∞—Ç–∞"""
    try:
        if len(df) < 50:
            return None

        df = technical_indicators(df)
        
        last = df.iloc[-1]
        if not (last['ema12'] < last['ema26'] < last['ema50']):
            return None

        recent = df.tail(5)
        if len(recent) < 5:
            return None

        second_last = recent.iloc[-2]
        last_candle = recent.iloc[-1]
        
        if (second_last['c'] > second_last['ema20'] and 
            last_candle['c'] < last_candle['ema20'] and 
            last_candle['v'] > last_candle['avg_volume'] * 1.2):
            
            pullback_level = second_last['ema20']
            entry_price = last_candle['c']
            pullback_percent = abs(entry_price - pullback_level) / pullback_level * 100
            
            if pullback_percent <= 5.0:
                stop_loss = pullback_level * 1.02
                risk = stop_loss - entry_price
                take_profit_1 = entry_price - risk * 1
                take_profit_2 = entry_price - risk * 2
                take_profit_3 = entry_price - risk * 3

                take_profit_1 = max(take_profit_1, entry_price * 0.1)
                take_profit_2 = max(take_profit_2, entry_price * 0.1)
                take_profit_3 = max(take_profit_3, entry_price * 0.1)

                return {
                    'type': 'PULLBACK_SHORT',
                    'entry': entry_price,
                    'stop': stop_loss,
                    'tp1': take_profit_1,
                    'tp2': take_profit_2,
                    'tp3': take_profit_3,
                    'pullback_level': pullback_level,
                    'ema20': last_candle['ema20'],
                    'rsi': last_candle.get('rsi', 50),
                    'volume': last_candle['v'],
                    'volume_mult': last_candle['v'] / last_candle['avg_volume']
                }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ detect_pullback_short_signal: {e}")
    return None

async def on_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ Telegram"""
    query = update.callback_query
    await query.answer()

    try:
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö - —É—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å |
        query_data = query.data
        if "|" not in query_data:
            await query.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –ø–µ—Ä–≤–æ–º—É | 
        parts = query_data.split("|", 1)  # –¢–æ–ª—å–∫–æ 1 —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        if len(parts) != 2:
            await query.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        action = parts[0]
        symbol = parts[1]  # symbol –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å |
        
        logging.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: action={action}, symbol={symbol}")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    if action == "orderbook":
        try:
            exchange = ccxt.mexc({
                'options': {'defaultType': 'swap', 'adjustForTimeDifference': True},
                'timeout': 30000,
            })
            ob = exchange.fetch_order_book(symbol, limit=15)
            bids = "\n".join([f"{p:.8f} / {a:.2f}" for p, a in ob["bids"][:10]])
            asks = "\n".join([f"{p:.8f} / {a:.2f}" for p, a in ob["asks"][:10]])
            text = (
                f"üîç <b>–§–¨–Æ–ß–ï–†–°–ù–´–ô –°–¢–ê–ö–ê–ù {symbol}</b>\n\n"
                f"<b>BIDS (–ø–æ–∫—É–ø–∫–∞):</b>\n<pre>{bids}</pre>\n\n"
                f"<b>ASKS (–ø—Ä–æ–¥–∞–∂–∞):</b>\n<pre>{asks}</pre>"
            )
            await query.message.reply_text(text, parse_mode="HTML")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è {symbol}: {e}")
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞–∫–∞–Ω–∞: {e}")

    elif action == "details":
        try:
            exchange = ccxt.mexc({
                'options': {'defaultType': 'swap', 'adjustForTimeDifference': True},
                'timeout': 30000,
            })
            ticker = exchange.fetch_ticker(symbol)
            ohlcv = exchange.fetch_ohlcv(symbol, timeframe="1h", limit=24)
            df = pd.DataFrame(ohlcv, columns=["ts", "o", "h", "l", "c", "v"])
            df = technical_indicators(df)
            
            last = df.iloc[-1]
            support = df['l'].tail(20).min()
            resistance = df['h'].tail(20).max()
            
            trend = "üìà –í–í–ï–†–•" if last['ema12'] > last['ema26'] > last['ema50'] else "üìâ –í–ù–ò–ó" if last['ema12'] < last['ema26'] < last['ema50'] else "Ìö° –ë–û–ö–û–í–ò–ö"
            
            text = (
                f"üìä <b>–î–ï–¢–ê–õ–ò {symbol}</b>\n\n"
                f"üí∞ –¶–µ–Ω–∞: <b>{ticker['last']:.8f}</b>\n"
                f"üìà 24h High: <b>{ticker['high']:.8f}</b>\n"
                f"üìâ 24h Low: <b>{ticker['low']:.8f}</b>\n"
                f"üìä 24h Volume: <b>${ticker['quoteVolume']:,.0f}</b>\n"
                f"üß≠ –¢—Ä–µ–Ω–¥: <b>{trend}</b>\n\n"
                f"üî¢ RSI: <b>{last.get('rsi', 50):.2f}</b>\n"
                f"üìâ MACD: <b>{last.get('macd', 0):.6f}</b>\n"
                f"üìà Signal: <b>{last.get('signal', 0):.6f}</b>\n\n"
                f"üìâ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: <b>{support:.8f}</b>\n"
                f"üìà –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: <b>{resistance:.8f}</b>"
            )
            await query.message.reply_text(text, parse_mode="HTML")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è {symbol}: {e}")
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª–µ–π: {e}")
    else:
        await query.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    global bot_app, bot_loop
    
    try:
        logging.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é —Ñ—å—é—á–µ—Ä—Å–Ω—ã–π —Å–∫–∞–Ω–µ—Ä MEXC...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        bot_app = Application.builder().token(TELEGRAM_TOKEN).build()
        bot_app.add_handler(CallbackQueryHandler(on_callback_query))
        
        # –ü–æ–ª—É—á–∞–µ–º event loop
        try:
            bot_loop = asyncio.get_running_loop()
        except RuntimeError:
            bot_loop = asyncio.new_event_loop()
            asyncio.set_event_loop(bot_loop)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫–∞–Ω–µ—Ä
        screener = FuturesScreener()
        
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def start_screener_thread():
            time.sleep(3)  # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram-–±–æ—Ç–∞
            logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ñ—å—é—á–µ—Ä—Å–Ω—ã–π —Å–∫–∞–Ω–µ—Ä...")
            screener.start_screener()

        threading.Thread(target=start_screener_thread, daemon=True).start()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        asyncio.run_coroutine_threadsafe(
            screener.send_startup_notification(),
            bot_loop
        )

        logging.info("üöÄ –§–¨–Æ–ß–ï–†–°–ù–´–ô –°–ö–ê–ù–ï–† MEXC –ó–ê–ü–£–©–ï–ù!")
        logging.info("üìà –°–∫–∞–Ω–∏—Ä—É—é —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã...")
        logging.info("‚ö° –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = –≤—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å!")
        logging.info("üì≤ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–∏–≥–Ω–∞–ª—ã –≤ Telegram...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot_app.run_polling()

    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    logging.info("üîß –ó–∞–ø—É—Å–∫–∞—é –§–¨–Æ–ß–ï–†–°–ù–´–ô –°–ö–ê–ù–ï–† MEXC...")
    logging.info("üìä –°–∫–∞–Ω–∏—Ä—É—é —Å–∞–º—ã–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å—ã...")
    main()
